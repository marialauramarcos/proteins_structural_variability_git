{
    "collab_server" : "",
    "contents" : "# Description:\n#\n# This is the main program of the project. The program simulates multiple mutants of a given protein using the \"Linearly Forced - \n# Elastic Network Model\" (LF-ENM) with different selection regimens according to the \"Stress Model\". The program also\n# analyzes the multiple alignment of the family to which the protein belongs and calculates measures \n# of variabilty of theoretical and experimental structures.\n# Experimental structures and the multiple alignment must be obtained from Homstrad.\n# The difference between this program and \"MainProgram.R\" is that, in this case, the model considers two nodes per\n# aminoacid, the alpha carbon (CA) and the center of mass of the side chain (CM).\n# For the simulations using the LF-ENM, only CMs are mutated.\n#\n# To run the program it is necessary to previously fill the input (\"input_MainProgram.csv\") with the following information:\n#\n#    - family: The family of the protein to mutate.\n#    - p.ref: The pdb code (pdbid) of the protein to mutate (example: \"1a6m\"). The protein must be a member of\n#    the selected family. This pdbid must not be included in the dataset (\"DATA/family_dataset.csv\").\n#    - chain.p.ref: The chain of p.ref in the pdb file obtained from Homstrad.\n#    - n.mut.p: The number of mutants to generate for each member of the family. For example, if the family has 20 \n#    members, the program generates n.mut.p x 20 mutants.\n#    - fmax: Argument for the \"LF-ENM\". It is the maximun value for the forces that model the mutations. \n#    - R0.CA: The Cut-off for the \"ANM\" (Anisotropic Network Model) that represents the proteins for the CA model. Not used in this program.\n#    - R0.CM: The Cut-off for the \"ANM\" (Anisotropic Network Model) that represents the proteins for the two nodes per site model.\n#    - rotate: It can be \"TRUE\" or \"FALSE\". If it is \"TRUE\", r.p.2 is rotated in order to minimize RMSD with r.p.ref.\n#    - heme: Argument for \"globins\". It can be \"TRUE\" or \"FALSE\". If it is \"TRUE\", the program considers the heme group.\n#    - calculate.betas: It can be \"TRUE\" or \"FALSE\". If it is \"TRUE\", the program calculates betas of the \"Stress Model\".\n#    - analyze.family: It can be \"TRUE\" or \"FALSE\". If it is \"TRUE\", the program analyzes the family.\n#    - generate.mutants: It can be \"TRUE\" or \"FALSE\". If it is \"TRUE\", the program generates new mutants.\n#    - analyze.experimental.theoretical: It can be \"TRUE\" or \"FALSE\". If it is \"TRUE\", the program analyzes the proteins.\n#    - K.analysis: It can be \"K\" or \"Keff\". For \"K\" or \"Keff\", the analysis is based on normal modes of \"K\" or \"Keff\"\n#    respectibly.\n\n### PROGRAM ###\n\n# remove objects from the workspace\nrm(list = ls())\n\n# load packages\nlibrary(bio3d)\nlibrary(seqinr)\n\n# data dir\ndata.dir <- \"DATA\"\n\n# set Elastic Network Model: \"ANM\" or \"pfANM\"\nmodel <- \"ANM\"\n\n# output dir\nif (model == \"ANM\") out.dir <- \"OUT/out_subset_CM_ANM\"\nif (model == \"pfANM\") out.dir <- \"OUT/out_subset_CM_pfANM\"\n\n# general parameters\ntolerance = 1e-10\n\n# function filenames\nAnalyzeExperimentalTheoreticalCM.fname <- \"FUNCTIONS/AnalyzeExperimentalTheoreticalCM.R\"\nAnalyzeFamily.fname <- \"FUNCTIONS/AnalyzeFamily.R\"\nAnalyzeAlignment.fname <- \"FUNCTIONS/AnalyzeAlignment.R\"\nGenerateMutantsCM.fname <- \"FUNCTIONS/GenerateMutantsCM.R\"\nReadFasta.fname <- \"FUNCTIONS/ReadFasta.R\"\nReadCA.fname <- \"FUNCTIONS/ReadCA.R\"\nReadHeme.fname <- \"FUNCTIONS/ReadHeme.R\"\nCalculateSideChainCM.fname <- \"FUNCTIONS/CalculateSideChainCM.R\"\nCalculateENMKeff.fname <- \"FUNCTIONS/CalculateENMKeff.R\"\nCalculateENMK.fname <- \"FUNCTIONS/CalculateENMK.R\"\nCalculateVariability.fname <- \"FUNCTIONS/CalculateVariability.R\"\nCalculateDynamicalVariability.fname <- \"FUNCTIONS/CalculateDynamicalVariability.R\"\nCalculateDaCMCA.fname <- \"FUNCTIONS/CalculateDaCMCA.R\"\nGetCore.fname <- \"FUNCTIONS/GetCore.R\"\nWindowsRMSD.fname <- \"FUNCTIONS/WindowsRMSD.R\"\nWindowsRMSDcontacts.fname <- \"FUNCTIONS/WindowsRMSDcontacts.R\"\nif (model == \"ANM\") {\n  CalculateBetasCM.fname <- \"FUNCTIONS/CalculateBetasCM.R\"\n  CalculateKij.fname <- \"FUNCTIONS/CalculateKij.R\"\n  CalculateForce.fname <- \"FUNCTIONS/CalculateForce.R\"\n}\nif (model == \"pfANM\") {\n  CalculateBetasCM.fname <- \"FUNCTIONS/CalculateBetasCMPFANM.R\"\n  CalculateKij.fname <- \"FUNCTIONS/CalculateKijPFANM.R\"\n  CalculateForce.fname <- \"FUNCTIONS/CalculateForcePFANM.R\"\n}\n\n# source functions\nsource(AnalyzeExperimentalTheoreticalCM.fname)\nsource(AnalyzeFamily.fname)\nsource(AnalyzeAlignment.fname)\nsource(GenerateMutantsCM.fname)\nsource(ReadFasta.fname) \nsource(ReadCA.fname) \nsource(ReadHeme.fname)\nsource(CalculateSideChainCM.fname)\nsource(CalculateENMKeff.fname)\nsource(CalculateENMK.fname)\nsource(CalculateVariability.fname)\nsource(CalculateDynamicalVariability.fname)\nsource(CalculateDaCMCA.fname)\nsource(GetCore.fname)\nsource(WindowsRMSD.fname)\nsource(WindowsRMSDcontacts.fname)\nsource(CalculateBetasCM.fname)\nsource(CalculateKij.fname)\nsource(CalculateForce.fname)\n\n# read input\ninput.fname <- file.path(\"input_MainProgram.csv\")\ninput <- read.csv(input.fname)\n\n# start a loop to analyze each family\nfor (f in (1:nrow(input))) { \n  family <- as.character(input$family)[f]\n  p.ref <- as.character(input$p.ref)[f]\n  chain.p.ref <- as.character(input$chain.p.ref)[f]\n  n.mut.p = input$n.mut.p[f]\n  fmax = input$fmax[f] \n  R0 = input$R0.CM[f]\n  rotate <- input$rotate[f]\n  heme <- input$heme[f]\n  calculate.betas <- input$calculate.betas[f]\n  analyze.family <- input$analyze.family[f]\n  generate.mutants <- input$generate.mutants[f]\n  analyze.experimental.theoretical <- input$analyze.experimental.theoretical[f]\n  K.analysis <- input$K.analysis[f]\n  \n  print(family)\n  \n  # analyze the alignment of the family\n  if (analyze.family == \"TRUE\") {\n    AnalyzeFamily(family,\n                  p.ref, \n                  data.dir,\n                  out.dir)\n  }\n  \n  # get the core of the alignment\n  GetCore(family,\n          data.dir,\n          p.ref)\n  \n  # calculate distances to the active site\n  CalculateDaCMCA(family,\n                  p.ref,\n                  chain.p.ref,\n                  heme,\n                  data.dir,\n                  out.dir)\n  \n  # generate id for betas output filename\n  betas.fname.id <- paste(family, \"_\", p.ref, \"_R0_\", R0, sep = \"\")\n  \n  # calculate betas of the \"Stress Model\"\n  if (calculate.betas == \"TRUE\") {\n    CalculateBetasCM(chain.p.ref,\n                     fmax,\n                     R0,\n                     heme,\n                     data.dir,\n                     out.dir,\n                     betas.fname.id,\n                     tolerance)\n  }\n  \n  # read betas and stablish selection regimens\n  all.betas <- read.csv(file.path(out.dir, paste(betas.fname.id, \"_out_all.betas.csv\", sep = \"\")))\n  regimens <- c(\"strong.sel\", \"medium.sel\", \"weak.sel\", \"no.sel\")\n  \n  # start a loop for each beta\n  for (b in all.betas)  {\n    \n    # filter regimens\n    if (regimens[all.betas == b] != \"weak.sel\") {\n      if (regimens[all.betas == b] != \"strong.sel\") {\n        \n        # generate ids for output filenames\n        mut.fname.id <- paste(family, \"_R0_\", R0, \"_beta_\", regimens[all.betas == b], sep = \"\")\n        analysis.fname.id <- paste(mut.fname.id, \"_K.analysis_\", K.analysis, sep = \"\")\n  \n        # generate mutants\n        if (generate.mutants == \"TRUE\") {\n          GenerateMutantsCM(family,\n                            chain.p.ref, \n                            n.mut.p,\n                            fmax, \n                            R0,\n                            b,\n                            heme, \n                            data.dir,\n                            out.dir,\n                            mut.fname.id,\n                            tolerance)\n        }\n  \n        # calculate measures of variability of theoretical and experimental proteins\n        if (analyze.experimental.theoretical == \"TRUE\") {\n          AnalyzeExperimentalTheoreticalCM(family,\n                                           p.ref,\n                                           chain.p.ref,\n                                           n.mut.p,\n                                           R0, \n                                           rotate,\n                                           heme,\n                                           K.analysis,\n                                           data.dir,\n                                           out.dir,\n                                           mut.fname.id, \n                                           analysis.fname.id,\n                                           tolerance)\n        }\n      }\n    }\n  }\n}",
    "created" : 1511709828326.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "977109812",
    "id" : "A8DF67FE",
    "lastKnownWriteTime" : 1503788690,
    "last_content_update" : 1503788690,
    "path" : "C:/Users/MarÃ­a Laura/Desktop/proteins_structural_variability_git/MainProgramCM.R",
    "project_path" : "MainProgramCM.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}